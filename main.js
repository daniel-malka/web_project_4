!function(){"use strict";function e(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class t{constructor(t,s,r){e(this,"_removeCard",(()=>this._cardElement.remove())),e(this,"_toggleHeart",(e=>{e.target.classList.toggle("button_liked")})),this._title=t.title,this._link=t.link,this._alt="Photo of ".concat(t.title),this._templateElement=s,this._handleCardClick=r}_setEventListeners(){this._deleteCard.addEventListener("click",(()=>this._removeCard())),this._likeCard.addEventListener("click",(e=>this._toggleHeart(e))),this._galleryImg.addEventListener("click",(()=>this._handleCardClick(this._title,this._link)))}createCard(){return this._cardElement=document.querySelector(this._templateElement).content.querySelector(".gallery__item").cloneNode(!0),this._galleryImg=this._cardElement.querySelector(".gallery__img"),this._galleryText=this._cardElement.querySelector(".desc__text"),this._deleteCard=this._cardElement.querySelector(".gallery__bin"),this._likeCard=this._cardElement.querySelector(".desc__heart"),this._galleryImg.src=this._link,this._galleryText.textContent=this._title,this._galleryImg.alt=this._alt,this._setEventListeners(),this._cardElement}}function s(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class r{constructor(e,t){s(this,"resetValidation",(()=>{this._hideAllErrors(),this._formElement.reset(),this._disableButton()})),s(this,"enableValidation",(()=>{this._formElement.addEventListener("submit",(e=>e.preventDefault())),this._setEventListeners()})),s(this,"_setEventListeners",(()=>{this._allInputs.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButton(this._allInputs)}))}))})),s(this,"_hideAllErrors",(()=>{this._allInputs.forEach((e=>{this._hideInputError(e)}))})),s(this,"_disableButton",(()=>{const{buttonDisable:e}=this._settings;this._buttonEl.classList.add(e),this._buttonEl.disabled=!0})),s(this,"_showInputError",((e,t)=>{const{inputErrorClass:s,spanErrorClass:r}=this._settings;this._errorDynamicSpan=this._formElement.querySelector(".fieldset__error-type-".concat(e.id)),e.classList.add(s),this._errorDynamicSpan.textContent=t,this._errorDynamicSpan.classList.add(r)})),s(this,"_hideInputError",(e=>{const{inputErrorClass:t,spanErrorClass:s}=this._settings;this._errorDynamicSpan=this._formElement.querySelector(".fieldset__error-type-".concat(e.id)),e.classList.remove(t),this._errorDynamicSpan.classList.remove(s),this._errorDynamicSpan.textContent=""})),s(this,"_toggleButton",(e=>{const{buttonDisable:t}=this._settings;e.every((e=>e.validity.valid))?(this._buttonEl.classList.remove(t),this._buttonEl.disabled=!1):this._disableButton()})),s(this,"_checkInputValidity",(e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)})),this._settings=e,this._formElement=t,this._allInputs=Array.from(this._formElement.querySelectorAll(this._settings.inputSelector)),this._buttonEl=this._formElement.querySelector(this._settings.buttonSelector)}}function i(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class o{constructor(e){i(this,"_handleOverlay",(e=>{e.target.classList.contains("popup")&&this.close()})),i(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.close()})),this._popup=document.querySelector(e)}open(){this._popup.classList.add("popup_open"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("popup_open"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popup.addEventListener("mousedown",this._handleOverlay),this._popup.querySelector(".popup__close").addEventListener("mousedown",(()=>this.close()))}}class n extends o{constructor(e,t){super(e),this._handleForm=t,this._form=this._popup.querySelector(".form"),this._inputs=Array.from(this._form.querySelectorAll(".fieldset__input"))}_getInputValues(){return this._values={},this._inputs.forEach((e=>{this._key=e.name,this._value=e.value,this._values[this._key]=this._value})),this._values}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._valuesFromForm=this._getInputValues(),this._handleForm(this._valuesFromForm),super.close()}))}setInputValues(e){this._inputs.forEach((t=>{t.value=e[t.name]}))}close(){super.close(),this._form.reset()}}const l=(document.forms.formProfile.elements.name,document.forms.formProfile.elements.occupation,document.querySelector(".text__edit")),a=document.querySelector(".top__plus-box"),c={inputSelector:".fieldset__input",buttonSelector:".fieldset__button",buttonDisable:"fieldset__button_disabled",inputErrorClass:"fieldset__input_error",spanErrorClass:"fieldset__error-message-active"},h=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers,this._token=token}getUserInfo(){fetch(this._baseUrl+"/users/danielMalka",{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch((e=>{console.log(e)}))}getCardsInfo(){fetch(this._baseUrl+"/cards",{headers:{authorization:this._token}}).then((e=>e.ok?e.json():Promise.reject(console.log(e.statusText))))}addCard(){fetch(this._baseUrl+"/cards",{method:"POST",body:JSON.stringify({name:"some string",link:"www.somelink.com"}),headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(console.log(e.statusText))))}editProfile(){return fetch(this._baseUrl+"users/me",{method:"PATCH",headers:{authorization:this._token,"Content-Type":"application/json"},body:JSON.stringify({name:"another user name",about:"another about"})})}}({baseUrl:"https://around.nomoreparties.co/v1/",headers:{authorization:"6efb715f-3f27-47aa-b11b-00d476bb80a2","Content-Type":"application/json"}});h.getUserInfo().then((e=>{console.log("res =>",e)})).catch(console.log("err ")),h.getCardsInfo().then((e=>console.log("res =>",e))).catch(console.log),h.editProfile();const _={formImg:"formImg",formProfile:"formProfile"},u=e=>{const s=(e=>new t(e,"#gallery__item",((e,t)=>{p.open(e,t)})).createCard())(e);g.addItem(s)};Array.from(document.querySelectorAll(".form")).forEach((e=>{const t=new r(c,e),s=e.getAttribute("name");_[s]=t,t.enableValidation()}));const d=new class{constructor(e){let{nameSelector:t,occupationSelector:s}=e;this._userName=document.querySelector(t),this._userOccupation=document.querySelector(s)}getUserInfo(){return{name:this._userName.textContent,occupation:this._userOccupation.textContent}}setUserInfo(e){this._userName.textContent=e.name,this._userOccupation.textContent=e.occupation}}({nameSelector:".text__name",occupationSelector:".text__occupation"}),p=new class extends o{open(e,t){this._image=this._popup.querySelector(".popup__img"),this._caption=this._popup.querySelector(".popup__caption"),this._caption.textContent=e,this._image.src=t,this._image.alt="Photo of ".concat(e),super.open()}}(".popup_type_zoom");p.setEventListeners();const m=new n(".popup_type_profile",(e=>{d.setUserInfo(e)}));m.setEventListeners();const f=new n(".popup_type_card",(e=>{u({title:e.title,link:e.link}),f.close()}));f.setEventListeners();const g=new class{constructor(e,t){this._renderer=e,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>{this.addItem(e,this._renderer(e))}))}addItem(){}}(u,".gallery");fetch("").then((e=>{g.renderItems(e),console.log("hixcsdcs")})),a.addEventListener("click",(()=>(_[formImg.getAttribute("name")].resetValidation(),void f.open()))),l.addEventListener("click",(()=>{var e;_[formProfile.getAttribute("name")].resetValidation(),e=d.getUserInfo(),m.setInputValues(e),m.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,