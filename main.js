!function(){"use strict";class t{constructor(t,e,s,r,n,i){var o,a;a=()=>this._cardElement.remove(),(o="removeCard")in this?Object.defineProperty(this,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):this[o]=a,this._name=t.name,this._userId=e,this._link=t.link,this._likes=t.likes,this._owner=t.owner._id,this._id=t._id,this._handleCardClick=r,this._handleLikeButton=n,this._handleDelete=i,this._alt="Photo of ".concat(t.name),this._templateElement=s}isLiked(){return this._likes.some((t=>t._id==this._userId))}getId(){return this._id}_setEventListeners(){this._deleteCard.addEventListener("click",(()=>this._handleDelete(this._id))),this._likeCard.addEventListener("click",(()=>this._handleLikeButton(this._id))),this._galleryImg.addEventListener("click",(()=>this._handleCardClick(this._name,this._link)))}addLike(){this._likeCard.classList.add("button_liked")}removeLike(){this._likeCard.classList.remove("button_liked")}setLikes(t){this._likes=t;const e=this._likes.length;this._cardElement.querySelector(".like__counter").textContent=e,this._owner!==this._userId&&(this._deleteCard.style.display="none")}_generateCard(){return this._cardElement=document.querySelector(this._templateElement).content.querySelector(".gallery__item").cloneNode(!0)}createCard(){return this._cardElement=this._generateCard(),this._galleryImg=this._cardElement.querySelector(".gallery__img"),this._galleryText=this._cardElement.querySelector(".desc__text"),this._deleteCard=this._cardElement.querySelector(".gallery__bin"),this._likeCard=this._cardElement.querySelector(".like__button"),this._galleryText.textContent=this._name,this._galleryImg.src=this._link,this._galleryImg.alt=this._alt,this.setLikes(this._likes),this._setEventListeners(),this.isLiked()?this.addLike():this.removeLike(),this._cardElement}}function e(t,e,s){return e in t?Object.defineProperty(t,e,{value:s,enumerable:!0,configurable:!0,writable:!0}):t[e]=s,t}class s{constructor(t,s){e(this,"resetValidation",(()=>{this._hideAllErrors(),this._disableButton()})),e(this,"enableValidation",(()=>{this._formElement.addEventListener("submit",(t=>t.preventDefault())),this._setEventListeners()})),e(this,"_setEventListeners",(()=>{this._allInputs.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButton()}))}))})),e(this,"_hideAllErrors",(()=>{this._allInputs.forEach((t=>{this._hideInputError(t)}))})),e(this,"_disableButton",(()=>{const{buttonDisable:t}=this._settings;this._buttonEl.classList.add(t),this._buttonEl.disabled=!0})),e(this,"_showInputError",((t,e)=>{const{inputErrorClass:s,spanErrorClass:r}=this._settings;this._errorDynamicSpan=this._formElement.querySelector(".fieldset__error-type-".concat(t.id)),t.classList.add(s),this._errorDynamicSpan.textContent=e,this._errorDynamicSpan.classList.add(r)})),e(this,"_hideInputError",(t=>{const{inputErrorClass:e,spanErrorClass:s}=this._settings;this._errorDynamicSpan=this._formElement.querySelector(".fieldset__error-type-".concat(t.id)),t.classList.remove(e),this._errorDynamicSpan.classList.remove(s),this._errorDynamicSpan.textContent=""})),e(this,"_checkFormValidity",(()=>this._allInputs.every((t=>t.validity.valid)))),e(this,"_toggleButton",(()=>{const{buttonDisable:t}=this._settings;this._checkFormValidity()?this._enableButton():this._disableButton()})),e(this,"_checkInputValidity",(t=>{t.validity.valid?this._hideInputError(t):this._showInputError(t,t.validationMessage)})),this._settings=t,this._formElement=s,this._allInputs=[...this._formElement.querySelectorAll(this._settings.inputSelector)],this._buttonEl=this._formElement.querySelector(this._settings.buttonSelector)}_enableButton(){const{buttonDisable:t}=this._settings;this._buttonEl.classList.remove(t),this._buttonEl.disabled=!1}}function r(t,e,s){return e in t?Object.defineProperty(t,e,{value:s,enumerable:!0,configurable:!0,writable:!0}):t[e]=s,t}class n{constructor(t){r(this,"_handleOverlay",(t=>{t.target.classList.contains("popup")&&this.close()})),r(this,"_handleEscClose",(t=>{"Escape"===t.key&&this.close()})),this._popup=document.querySelector(t)}open(){this._popup.classList.add("popup_open"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("popup_open"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popup.addEventListener("mousedown",this._handleOverlay),this._popup.querySelector(".popup__close").addEventListener("mousedown",(()=>this.close()))}}class i extends n{constructor(t,e){super(t),this._handleForm=e,this._form=this._popup.querySelector(".form"),this._submitButton=this._form.querySelector(".fieldset__button"),this._submitButtonText=this._submitButton.textContent,this._inputs=Array.from(this._form.querySelectorAll(".fieldset__input"))}showLoading(){this._buttonText=this._loadingButtonText}hideLoading(){this._submitButton.textContent=this._buttonText.textContent}_getInputValues(){const t={};return this._inputs.forEach((e=>{const s=e.name,r=e.value;t[s]=r})),t}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(t=>{t.preventDefault();const e=this._getInputValues();this._handleForm(e)}))}renderLoading(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=t?e:this._submitButtonText}close(){super.close(),this._form.reset()}}const o=".gallery",a=document.forms.formProfile.elements.name,l=document.forms.formProfile.elements.about,h=(document.forms.formAvatar.elements.link,document.querySelector(".text__edit")),c=document.querySelector(".top__plus-box"),d=document.querySelector(".top__container-image"),_={inputSelector:".fieldset__input",buttonSelector:".fieldset__button",buttonDisable:"fieldset__button_disabled",inputErrorClass:"fieldset__input_error",spanErrorClass:"fieldset__error-message-active"},u=new class{constructor(t){this._baseUrl=t.baseUrl,this._headers=t.headers}_customFetch(t,e){return fetch(t,e).then((t=>t.ok?t.json():Promise.reject(t.statusText)))}getCards(){return this._customFetch("".concat(this._baseUrl,"/cards"),{headers:this._headers})}getUserInfo(){return this._customFetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers})}setUserInfo(t){let{name:e,about:s}=t;return this._customFetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify({name:e,about:s})})}addCard(t){let{name:e,link:s}=t;return this._customFetch("".concat(this._baseUrl,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify({name:e,link:s})})}editAvatar(t){return this._customFetch("".concat(this._baseUrl,"/users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:t})})}deleteCard(t){return this._customFetch("".concat(this._baseUrl,"/cards/").concat(t),{headers:this._headers,method:"DELETE"})}dislikeCard(t){return this._customFetch("".concat(this._baseUrl,"/cards/likes/").concat(t),{headers:this._headers,method:"DELETE"})}likeCard(t){return this._customFetch("".concat(this._baseUrl,"/cards/likes/").concat(t),{headers:this._headers,method:"PUT"})}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"6efb715f-3f27-47aa-b11b-00d476bb80a2","Content-Type":"application/json"}}),m=new class extends n{constructor(t){super(t),this.popup=document.querySelector(t)}setAction(t){this._submitHandler=t}setEventListeners(){this._popup.addEventListener("submit",(t=>{t.preventDefault(),this._submitHandler()})),super.setEventListeners()}}(".popup_type_delete");let p;m.setEventListeners();const b=new class{constructor(t,e){this._renderer=t,this._container=document.querySelector(e)}renderInitialItems(t){t.forEach((t=>{this._renderer(t)}))}addItem(t){this._container.prepend(t)}}((t=>{g(t)}),o),g=t=>{b.addItem(E(t))},v=new class{constructor(t){this._userName=document.querySelector(t.name),this._userAbout=document.querySelector(t.about),this._userAvatar=document.querySelector(t.avatar)}getUserInfo(){return{name:this._userName.textContent,about:this._userAbout.textContent,avatar:this._userAvatar.src}}setUserInfo(t){let{nameInput:e,aboutInput:s}=t;this._userName.textContent=e,this._userAbout.textContent=s}setAvatar(t){this._userAvatar.src=t}}({name:".text__name",about:".text__about",avatar:".top__img"});Promise.all([u.getUserInfo(),u.getCards()]).then((t=>{let[e,s]=t;p=e._id,v.setUserInfo({nameInput:e.name,aboutInput:e.about}),v.setAvatar(e.avatar),b.renderInitialItems(s)})).catch((t=>console.log("Error somthing went wrong. ".concat(t))));const E=e=>{const s=new t(e,p,"#gallery__item",((t,e)=>{L.open(t,e)}),(t=>{s.isLiked()?u.dislikeCard(t).then((t=>{s.setLikes(t.likes),s.removeLike()})).catch((t=>console.log("Error somthing went wrong. ".concat(t)))):u.likeCard(t).then((t=>{s.setLikes(t.likes),s.addLike()})).catch((t=>console.log("Error somthing went wrong. ".concat(t))))}),(t=>{m.open(),m.setAction((()=>{u.deleteCard(t).then((t=>{s.removeCard(),m.close()})).catch((t=>console.log("Error somthing went wrong. ".concat(t)))).finally((()=>{}))}))}));return s.createCard()},y=new i(".popup_type_card",(t=>{y.renderLoading(!0,"Saving..."),u.addCard({name:t.title,link:t.link}).then((t=>{g(t,o),y.close()})).catch((t=>console.log("Error somthing went wrong. ".concat(t)))).finally((()=>{y.renderLoading(!1)}))})),f={};Array.from(document.querySelectorAll(".form")).forEach((t=>{const e=new s(_,t),r=t.getAttribute("name");f[r]=e,e.enableValidation()}));const L=new class extends n{constructor(t){super(t),this._popup=document.querySelector(t),this._caption=this._popup.querySelector(".popup__caption"),this._image=this._popup.querySelector(".popup__img")}open(t,e){this._caption.textContent=t,this._image.src=e,this._image.alt="Photo of ".concat(t),super.open()}}(".popup_type_zoom");L.setEventListeners();const k=new i(".popup_type_profile",(t=>{k.renderLoading(!0," Adding..."),u.setUserInfo({name:t.name,about:t.about,avatar:t.avatar}).then((t=>{v.setUserInfo({nameInput:t.name,aboutInput:t.about,avatarInput:t.avatar}),v.setAvatarInfo(t.avatar),k.close()})).catch((t=>console.log("Error somthing went wrong. ".concat(t)))).finally((()=>{k.renderLoading(!1)}))}));k.setEventListeners();const C=new i(".popup_type_avatar",(t=>{(t=>{C.renderLoading(!0,"Changing..."),u.editAvatar(t.url).then((t=>{v.setAvatar(t.avatar)})).catch((t=>console.log("Error somthing went wrong. ".concat(t)))).finally((()=>{C.renderLoading(!1)}))})(t),C.close()}));c.addEventListener("click",(()=>{f[formImg.getAttribute("name")].resetValidation(),y.setEventListeners(),y.open()})),h.addEventListener("click",(()=>{f[formProfile.getAttribute("name")].resetValidation(),v.getUserInfo(),(()=>{const{name:t,about:e}=v.getUserInfo();a.value=t,l.value=e})(),k.open()})),C.setEventListeners(),d.addEventListener("click",(()=>{f[formAvatar.getAttribute("name")].resetValidation(),C.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,