!function(){"use strict";class e{constructor(e,t,s,r,n,i){var o,a;a=()=>{this._cardElement.remove(),this._cardElement=null},(o="removeCard")in this?Object.defineProperty(this,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):this[o]=a,this._name=e.name,this._userId=t,this._link=e.link,this._likes=e.likes,this._owner=e.owner._id,this._id=e._id,this._handleCardClick=r,this._handleLikeButton=n,this._handleDelete=i,this._alt="Photo of ".concat(e.name),this._templateElement=s}isLiked(){return this._likes.some((e=>e._id==this._userId))}getId(){return this._id}_setEventListeners(){this._deleteCard.addEventListener("click",(()=>this._handleDelete(this._id))),this._likeCard.addEventListener("click",(()=>this._handleLikeButton(this._id))),this._galleryImg.addEventListener("click",(()=>this._handleCardClick(this._name,this._link)))}_addLike(){this._likeCard.classList.add("button_liked")}_removeLike(){this._likeCard.classList.remove("button_liked")}setLikes(e){this._likes=e,console.log(this._owner,"owner",this._userId,"userId"),this._renderLikes()}_hideDeleteButton(){this._owner!==this._userId&&(this._deleteCard.style.display="none")}_renderLikes(){this.isLiked()?this._addLike():this._removeLike();const e=this._likes.length;this._counterLikes.textContent=e}_generateCard(){return this._cardElement=document.querySelector(this._templateElement).content.querySelector(".gallery__item").cloneNode(!0)}createCard(){return this._cardElement=this._generateCard(),this._galleryImg=this._cardElement.querySelector(".gallery__img"),this._galleryText=this._cardElement.querySelector(".desc__text"),this._deleteCard=this._cardElement.querySelector(".gallery__bin"),this._likeCard=this._cardElement.querySelector(".like__button"),this._counterLikes=this._cardElement.querySelector(".like__counter"),this._galleryText.textContent=this._name,this._galleryImg.src=this._link,this._galleryImg.alt=this._alt,this._renderLikes(),this._hideDeleteButton(),this._setEventListeners(),this._cardElement}}function t(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class s{constructor(e,s){t(this,"resetValidation",(()=>{this._hideAllErrors(),this._disableButton()})),t(this,"enableValidation",(()=>{this._formElement.addEventListener("submit",(e=>e.preventDefault())),this._setEventListeners()})),t(this,"_setEventListeners",(()=>{this._allInputs.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButton()}))}))})),t(this,"_hideAllErrors",(()=>{this._allInputs.forEach((e=>{this._hideInputError(e)}))})),t(this,"_disableButton",(()=>{const{buttonDisable:e}=this._settings;this._buttonEl.classList.add(e),this._buttonEl.disabled=!0})),t(this,"_showInputError",((e,t)=>{const{inputErrorClass:s,spanErrorClass:r}=this._settings;this._errorElement=this._formElement.querySelector(".fieldset__error-type-".concat(e.id)),e.classList.add(s),this._errorElement.textContent=t,this._errorElement.classList.add(r)})),t(this,"_hideInputError",(e=>{const{inputErrorClass:t,spanErrorClass:s}=this._settings;this._errorElement=this._formElement.querySelector(".fieldset__error-type-".concat(e.id)),e.classList.remove(t),this._errorElement.classList.remove(s),this._errorElement.textContent=""})),t(this,"_checkFormValidity",(()=>this._allInputs.every((e=>e.validity.valid)))),t(this,"_toggleButton",(()=>{const{buttonDisable:e}=this._settings;this._checkFormValidity()?this._enableButton():this._disableButton()})),t(this,"_checkInputValidity",(e=>{e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)})),this._settings=e,this._formElement=s,this._allInputs=[...this._formElement.querySelectorAll(this._settings.inputSelector)],this._buttonEl=this._formElement.querySelector(this._settings.buttonSelector)}_enableButton(){const{buttonDisable:e}=this._settings;this._buttonEl.classList.remove(e),this._buttonEl.disabled=!1}}function r(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class n{constructor(e){r(this,"_handleOverlay",(e=>{e.target.classList.contains("popup")&&this.close()})),r(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.close()})),this._popup=document.querySelector(e)}open(){this._popup.classList.add("popup_open"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("popup_open"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popup.addEventListener("mousedown",this._handleOverlay),this._popup.querySelector(".popup__close").addEventListener("mousedown",(()=>this.close()))}}class i extends n{constructor(e,t){super(e),this._handleForm=t,this._form=this._popup.querySelector(".form"),this._submitButton=this._form.querySelector(".fieldset__button"),this._submitButtonText=this._submitButton.textContent,this._inputs=Array.from(this._form.querySelectorAll(".fieldset__input"))}_getInputValues(){const e={};return this._inputs.forEach((t=>{const s=t.name,r=t.value;e[s]=r})),e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._handleForm(t)}))}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}close(){super.close(),this._form.reset()}}const o=".gallery",a=document.forms.formProfile.elements.name,l=document.forms.formProfile.elements.about,h=(document.forms.formAvatar.elements.link,document.querySelector(".text__edit")),c=document.querySelector(".top__plus-box"),d=document.querySelector(".top__container-image"),_={inputSelector:".fieldset__input",buttonSelector:".fieldset__button",buttonDisable:"fieldset__button_disabled",inputErrorClass:"fieldset__input_error",spanErrorClass:"fieldset__error-message-active"},u=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}getCards(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers})}getUserInfo(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers})}setUserInfo(e){let{name:t,about:s}=e;return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify({name:t,about:s})})}addCard(e){let{name:t,link:s}=e;return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify({name:t,link:s})})}editAvatar(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})})}deleteCard(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{headers:this._headers,method:"DELETE"})}dislikeCard(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"DELETE"})}likeCard(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"PUT"})}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"6efb715f-3f27-47aa-b11b-00d476bb80a2","Content-Type":"application/json"}}),m=new class extends n{constructor(e){super(e),this._form=this._popup.querySelector(".form"),this._submitButton=this._form.querySelector(".fieldset__button-type-save"),this._submitButtonText=this._submitButton.textContent}setAction(e){this._submitHandler=e}setEventListeners(){this._popup.addEventListener("submit",(e=>{e.preventDefault(),this._submitHandler()})),super.setEventListeners()}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Deleting...";this._submitButton.textContent=e?t:this._submitButtonText}}(".popup_type_delete");let p;m.setEventListeners();const b=new class{constructor(e,t){this._renderer=e,this._container=document.querySelector(t)}renderInitialItems(e){e.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}((e=>{g(e)}),o),g=e=>{b.addItem(f(e))},E=new class{constructor(e){this._userName=document.querySelector(e.name),this._userAbout=document.querySelector(e.about),this._userAvatar=document.querySelector(e.avatar)}getUserInfo(){return{name:this._userName.textContent,about:this._userAbout.textContent,avatar:this._userAvatar.src}}setUserInfo(e){let{nameInput:t,aboutInput:s}=e;this._userName.textContent=t,this._userAbout.textContent=s}setAvatar(e){this._userAvatar.src=e}}({name:".text__name",about:".text__about",avatar:".top__img"});Promise.all([u.getUserInfo(),u.getCards()]).then((e=>{let[t,s]=e;p=t._id,E.setUserInfo({nameInput:t.name,aboutInput:t.about}),E.setAvatar(t.avatar),b.renderInitialItems(s)})).catch((e=>console.log("Error somthing went wrong. ".concat(e))));const f=t=>{const s=new e(t,p,"#gallery__item",((e,t)=>{L.open(e,t)}),(e=>{s.isLiked()?u.dislikeCard(e).then((e=>{s.setLikes(e.likes)})).catch((e=>console.log("Error somthing went wrong. ".concat(e)))):u.likeCard(e).then((e=>{s.setLikes(e.likes)})).catch((e=>console.log("Error somthing went wrong. ".concat(e))))}),(e=>{m.open(),m.setAction((()=>{m.renderLoading(!0,"Deleting..."),u.deleteCard(e).then((e=>{s.removeCard(),m.close()})).catch((e=>console.log("Error somthing went wrong. ".concat(e)))).finally((()=>{m.renderLoading(!1)}))}))}));return s.createCard()},v=new i(".popup_type_card",(e=>{v.renderLoading(!0,"Saving..."),u.addCard({name:e.title,link:e.link}).then((e=>{g(e,o),v.close()})).catch((e=>console.log("Error somthing went wrong. ".concat(e)))).finally((()=>{v.renderLoading(!1)}))})),y={};Array.from(document.querySelectorAll(".form")).forEach((e=>{const t=new s(_,e),r=e.getAttribute("name");y[r]=t,t.enableValidation()}));const L=new class extends n{constructor(e){super(e),this._popup=document.querySelector(e),this._caption=this._popup.querySelector(".popup__caption"),this._image=this._popup.querySelector(".popup__img")}open(e,t){this._caption.textContent=e,this._image.src=t,this._image.alt="Photo of ".concat(e),super.open()}}(".popup_type_zoom");L.setEventListeners();const k=new i(".popup_type_profile",(e=>{k.renderLoading(!0," Adding..."),u.setUserInfo({name:e.name,about:e.about,avatar:e.avatar}).then((e=>{E.setUserInfo({nameInput:e.name,aboutInput:e.about,avatarInput:e.avatar}),k.close(),E.setAvatarInfo(e.avatar)})).catch((e=>console.log("Error somthing went wrong. ".concat(e)))).finally((()=>{k.renderLoading(!1)}))}));k.setEventListeners();const C=new i(".popup_type_avatar",(e=>{(e=>{C.renderLoading(!0,"Changing..."),u.editAvatar(e.url).then((e=>{E.setAvatar(e.avatar)})).catch((e=>console.log("Error somthing went wrong. ".concat(e)))).finally((()=>{C.renderLoading(!1)}))})(e),C.close()}));c.addEventListener("click",(()=>{y[formImg.getAttribute("name")].resetValidation(),v.open()})),v.setEventListeners(),h.addEventListener("click",(()=>{y[formProfile.getAttribute("name")].resetValidation(),E.getUserInfo(),(()=>{const{name:e,about:t}=E.getUserInfo();a.value=e,l.value=t})(),k.open()})),C.setEventListeners(),d.addEventListener("click",(()=>{y[formAvatar.getAttribute("name")].resetValidation(),C.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,