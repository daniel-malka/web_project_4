!function(){"use strict";class t{constructor(t,e,s,r,n,i){var o,a;a=()=>{this._cardElement.remove(),this._cardElement=null},(o="removeCard")in this?Object.defineProperty(this,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):this[o]=a,this._name=t.name,this._userId=e,this._link=t.link,this._likes=t.likes,this._owner=t.owner._id,this._id=t._id,this._handleCardClick=r,this._handleLikeButton=n,this._handleDelete=i,this._alt="Photo of ".concat(t.name),this._templateElement=s}isLiked(){return this._likes.some((t=>t._id==this._userId))}getId(){return this._id}_setEventListeners(){this._deleteCard.addEventListener("click",(()=>this._handleDelete(this._id))),this._likeCard.addEventListener("click",(()=>this._handleLikeButton(this._id))),this._galleryImg.addEventListener("click",(()=>this._handleCardClick(this._name,this._link)))}_addLike(){this._likeCard.classList.add("button_liked")}_removeLike(){this._likeCard.classList.remove("button_liked")}setLikes(t){this._likes=t,console.log(this._owner,"owner",this._userId,"userId");const e=this._likes.length;this._counterLikes.textContent=e,this._renderLikes()}_hideDeleteButton(){this._owner!==this._userId&&(this._deleteCard.style.display="none")}_renderLikes(){this.isLiked()?this._addLike():this._removeLike()}_generateCard(){return this._cardElement=document.querySelector(this._templateElement).content.querySelector(".gallery__item").cloneNode(!0)}createCard(){return this._cardElement=this._generateCard(),this._galleryImg=this._cardElement.querySelector(".gallery__img"),this._galleryText=this._cardElement.querySelector(".desc__text"),this._deleteCard=this._cardElement.querySelector(".gallery__bin"),this._likeCard=this._cardElement.querySelector(".like__button"),this._counterLikes=this._cardElement.querySelector(".like__counter"),this._galleryText.textContent=this._name,this._galleryImg.src=this._link,this._galleryImg.alt=this._alt,this._renderLikes(),this._hideDeleteButton(),this._setEventListeners(),this._cardElement}}function e(t,e,s){return e in t?Object.defineProperty(t,e,{value:s,enumerable:!0,configurable:!0,writable:!0}):t[e]=s,t}class s{constructor(t,s){e(this,"resetValidation",(()=>{this._hideAllErrors(),this._disableButton()})),e(this,"enableValidation",(()=>{this._formElement.addEventListener("submit",(t=>t.preventDefault())),this._setEventListeners()})),e(this,"_setEventListeners",(()=>{this._allInputs.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButton()}))}))})),e(this,"_hideAllErrors",(()=>{this._allInputs.forEach((t=>{this._hideInputError(t)}))})),e(this,"_disableButton",(()=>{const{buttonDisable:t}=this._settings;this._buttonEl.classList.add(t),this._buttonEl.disabled=!0})),e(this,"_showInputError",((t,e)=>{const{inputErrorClass:s,spanErrorClass:r}=this._settings;this._errorDinamicTag=this._formElement.querySelector(".fieldset__error-type-".concat(t.id)),t.classList.add(s),this._errorDynamicTag.textContent=e,this._errorDynamicTag.classList.add(r)})),e(this,"_hideInputError",(t=>{const{inputErrorClass:e,spanErrorClass:s}=this._settings;this._errorDynamicTag=this._formElement.querySelector(".fieldset__error-type-".concat(t.id)),t.classList.remove(e),this._errorDynamicTag.classList.remove(s),this._errorDynamicTag.textContent=""})),e(this,"_checkFormValidity",(()=>this._allInputs.every((t=>t.validity.valid)))),e(this,"_toggleButton",(()=>{const{buttonDisable:t}=this._settings;this._checkFormValidity()?this._enableButton():this._disableButton()})),e(this,"_checkInputValidity",(t=>{t.validity.valid?this._hideInputError(t):this._showInputError(t,t.validationMessage)})),this._settings=t,this._formElement=s,this._allInputs=[...this._formElement.querySelectorAll(this._settings.inputSelector)],this._buttonEl=this._formElement.querySelector(this._settings.buttonSelector)}_enableButton(){const{buttonDisable:t}=this._settings;this._buttonEl.classList.remove(t),this._buttonEl.disabled=!1}}function r(t,e,s){return e in t?Object.defineProperty(t,e,{value:s,enumerable:!0,configurable:!0,writable:!0}):t[e]=s,t}class n{constructor(t){r(this,"_handleOverlay",(t=>{t.target.classList.contains("popup")&&this.close()})),r(this,"_handleEscClose",(t=>{"Escape"===t.key&&this.close()})),this._popup=document.querySelector(t)}open(){this._popup.classList.add("popup_open"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("popup_open"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popup.addEventListener("mousedown",this._handleOverlay),this._popup.querySelector(".popup__close").addEventListener("mousedown",(()=>this.close()))}}class i extends n{constructor(t,e){super(t),this._handleForm=e,this._form=this._popup.querySelector(".form"),this._submitButton=this._form.querySelector(".fieldset__button"),this._submitButtonText=this._submitButton.textContent,this._inputs=Array.from(this._form.querySelectorAll(".fieldset__input"))}_getInputValues(){const t={};return this._inputs.forEach((e=>{const s=e.name,r=e.value;t[s]=r})),t}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(t=>{t.preventDefault();const e=this._getInputValues();this._handleForm(e)}))}renderLoading(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=t?e:this._submitButtonText}close(){super.close(),this._form.reset()}}const o=".gallery",a=document.forms.formProfile.elements.name,l=document.forms.formProfile.elements.about,h=(document.forms.formAvatar.elements.link,document.querySelector(".text__edit")),c=document.querySelector(".top__plus-box"),_=document.querySelector(".top__container-image"),d={inputSelector:".fieldset__input",buttonSelector:".fieldset__button",buttonDisable:"fieldset__button_disabled",inputErrorClass:"fieldset__input_error",spanErrorClass:"fieldset__error-message-active"},u=new class{constructor(t){this._baseUrl=t.baseUrl,this._headers=t.headers}_customFetch(t,e){return fetch(t,e).then((t=>t.ok?t.json():Promise.reject(t.statusText)))}getCards(){return this._customFetch("".concat(this._baseUrl,"/cards"),{headers:this._headers})}getUserInfo(){return this._customFetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers})}setUserInfo(t){let{name:e,about:s}=t;return this._customFetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify({name:e,about:s})})}addCard(t){let{name:e,link:s}=t;return this._customFetch("".concat(this._baseUrl,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify({name:e,link:s})})}editAvatar(t){return this._customFetch("".concat(this._baseUrl,"/users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:t})})}deleteCard(t){return this._customFetch("".concat(this._baseUrl,"/cards/").concat(t),{headers:this._headers,method:"DELETE"})}dislikeCard(t){return this._customFetch("".concat(this._baseUrl,"/cards/likes/").concat(t),{headers:this._headers,method:"DELETE"})}likeCard(t){return this._customFetch("".concat(this._baseUrl,"/cards/likes/").concat(t),{headers:this._headers,method:"PUT"})}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"6efb715f-3f27-47aa-b11b-00d476bb80a2","Content-Type":"application/json"}}),m=new class extends n{constructor(t){super(t),this._form=this._popup.querySelector(".form"),this._submitButton=this._form.querySelector(".fieldset__button-type-save"),this._submitButtonText=this._submitButton.textContent}setAction(t){this._submitHandler=t}setEventListeners(){this._popup.addEventListener("submit",(t=>{t.preventDefault(),this._submitHandler()})),super.setEventListeners()}renderLoading(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Deleting...";this._submitButton.textContent=t?e:this._submitButtonText}}(".popup_type_delete");let p;m.setEventListeners();const g=new class{constructor(t,e){this._renderer=t,this._container=document.querySelector(e)}renderInitialItems(t){t.forEach((t=>{this._renderer(t)}))}addItem(t){this._container.prepend(t)}}((t=>{b(t)}),o),b=t=>{g.addItem(E(t))},v=new class{constructor(t){this._userName=document.querySelector(t.name),this._userAbout=document.querySelector(t.about),this._userAvatar=document.querySelector(t.avatar)}getUserInfo(){return{name:this._userName.textContent,about:this._userAbout.textContent,avatar:this._userAvatar.src}}setUserInfo(t){let{nameInput:e,aboutInput:s}=t;this._userName.textContent=e,this._userAbout.textContent=s}setAvatar(t){this._userAvatar.src=t}}({name:".text__name",about:".text__about",avatar:".top__img"});Promise.all([u.getUserInfo(),u.getCards()]).then((t=>{let[e,s]=t;p=e._id,v.setUserInfo({nameInput:e.name,aboutInput:e.about}),v.setAvatar(e.avatar),g.renderInitialItems(s)})).catch((t=>console.log("Error somthing went wrong. ".concat(t))));const E=e=>{const s=new t(e,p,"#gallery__item",((t,e)=>{L.open(t,e)}),(t=>{s.isLiked()?u.dislikeCard(t).then((t=>{s.setLikes(t.likes)})).catch((t=>console.log("Error somthing went wrong. ".concat(t)))):u.likeCard(t).then((t=>{s.setLikes(t.likes)})).catch((t=>console.log("Error somthing went wrong. ".concat(t))))}),(t=>{m.open(),m.setAction((()=>{m.renderLoading(!0,"Deleting..."),u.deleteCard(t).then((t=>{s.removeCard(),m.close()})).catch((t=>console.log("Error somthing went wrong. ".concat(t)))).finally((()=>{m.renderLoading(!1)}))}))}));return s.createCard()},y=new i(".popup_type_card",(t=>{y.renderLoading(!0,"Saving..."),u.addCard({name:t.title,link:t.link}).then((t=>{b(t,o),y.close()})).catch((t=>console.log("Error somthing went wrong. ".concat(t)))).finally((()=>{y.renderLoading(!1)}))})),f={};Array.from(document.querySelectorAll(".form")).forEach((t=>{const e=new s(d,t),r=t.getAttribute("name");f[r]=e,e.enableValidation()}));const L=new class extends n{constructor(t){super(t),this._popup=document.querySelector(t),this._caption=this._popup.querySelector(".popup__caption"),this._image=this._popup.querySelector(".popup__img")}open(t,e){this._caption.textContent=t,this._image.src=e,this._image.alt="Photo of ".concat(t),super.open()}}(".popup_type_zoom");L.setEventListeners();const k=new i(".popup_type_profile",(t=>{k.renderLoading(!0," Adding..."),u.setUserInfo({name:t.name,about:t.about,avatar:t.avatar}).then((t=>{v.setUserInfo({nameInput:t.name,aboutInput:t.about,avatarInput:t.avatar}),k.close(),v.setAvatarInfo(t.avatar)})).catch((t=>console.log("Error somthing went wrong. ".concat(t)))).finally((()=>{k.renderLoading(!1)}))}));k.setEventListeners();const C=new i(".popup_type_avatar",(t=>{(t=>{C.renderLoading(!0,"Changing..."),u.editAvatar(t.url).then((t=>{v.setAvatar(t.avatar)})).catch((t=>console.log("Error somthing went wrong. ".concat(t)))).finally((()=>{C.renderLoading(!1)}))})(t),C.close()}));c.addEventListener("click",(()=>{f[formImg.getAttribute("name")].resetValidation(),y.open()})),y.setEventListeners(),h.addEventListener("click",(()=>{f[formProfile.getAttribute("name")].resetValidation(),v.getUserInfo(),(()=>{const{name:t,about:e}=v.getUserInfo();a.value=t,l.value=e})(),k.open()})),C.setEventListeners(),_.addEventListener("click",(()=>{f[formAvatar.getAttribute("name")].resetValidation(),C.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TXVHLEVBQWdCLElBQUlyRyxFRjNMTixzQkUyTGtDekcsSUFyQzFCQSxLQUMxQjhNLEVBQWN2RixlQUFjLEVBQU0sZUFDbENlLEVBQUFBLFdBQ2N0SSxFQUFLNEksS0FDaEJFLE1BQU1DLElBQ0xvQyxFQUFTSSxVQUFVeEMsRUFBSWUsT0FBdkIsSUFFRDhCLE9BQU9DLEdBQVF0SixRQUFRQyxJQUFSLHFDQUEwQ3FKLE1BQ3pESSxTQUFRLEtBQ1BhLEVBQWN2RixlQUFjLEVBQTVCLEdBUEosRUFvQ0F3RixDQUFtQi9NLEdBQ25COE0sRUFBYzdHLE9BQWQsSUFNRm1DLEVBQWdCdEcsaUJBQWlCLFNBQVMsS0EvQ3hDc0ssRUFBZVksUUFBUVIsYUFBYSxTQUFTUyxrQkFrRDdDZixFQUFZOUYsTUFBWixJQUVGOEYsRUFBWTNGLG9CQUVaMkIsRUFBaUJwRyxpQkFBaUIsU0FBUyxLQWhDekNzSyxFQUFldEUsWUFBWTBFLGFBQWEsU0FBU1Msa0JBQzdCOUIsRUFBUzdCLGNBUkMsTUFDOUIsTUFBTSxLQUFFNUksRUFBRixNQUFRdUgsR0FBVWtELEVBQVM3QixjQUNqQzFCLEVBQVVQLE1BQVEzRyxFQUNsQnNILEVBQVdYLE1BQVFZLENBQW5CLEVBTUFpRixHQUNBTixFQUFZeEcsTUE4QmEsSUFHM0IwRyxFQUFjdkcsb0JBRWQ4QixFQUFnQnZHLGlCQUFpQixTQUFTLEtBL0R4Q3NLLEVBQWVqRSxXQUFXcUUsYUFBYSxTQUFTUyxrQkFpRWhESCxFQUFjMUcsTUFBZCxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL1BvcHVwLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvdXRpbGl0aWVzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvQXBpLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvcGFnZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aFN1Ym1pdC5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBDYXJkIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGRhdGEsXHJcbiAgICB1c2VySWQsXHJcbiAgICBzZWxlY3RvcixcclxuICAgIGhhbmRsZUNhcmRDbGljayxcclxuICAgIGhhbmRsZUxpa2VCdXR0b24sXHJcbiAgICBoYW5kbGVEZWxldGVcclxuICApIHtcclxuICAgIHRoaXMuX25hbWUgPSBkYXRhLm5hbWU7XHJcbiAgICB0aGlzLl91c2VySWQgPSB1c2VySWQ7XHJcbiAgICB0aGlzLl9saW5rID0gZGF0YS5saW5rO1xyXG4gICAgdGhpcy5fbGlrZXMgPSBkYXRhLmxpa2VzO1xyXG4gICAgdGhpcy5fb3duZXIgPSBkYXRhLm93bmVyLl9pZDtcclxuICAgIHRoaXMuX2lkID0gZGF0YS5faWQ7XHJcbiAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sgPSBoYW5kbGVDYXJkQ2xpY2s7XHJcbiAgICB0aGlzLl9oYW5kbGVMaWtlQnV0dG9uID0gaGFuZGxlTGlrZUJ1dHRvbjtcclxuICAgIHRoaXMuX2hhbmRsZURlbGV0ZSA9IGhhbmRsZURlbGV0ZTtcclxuICAgIHRoaXMuX2FsdCA9IGBQaG90byBvZiAke2RhdGEubmFtZX1gO1xyXG4gICAgdGhpcy5fdGVtcGxhdGVFbGVtZW50ID0gc2VsZWN0b3I7XHJcbiAgfVxyXG5cclxuICBpc0xpa2VkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2xpa2VzLnNvbWUoKGxpa2UpID0+IGxpa2UuX2lkID09IHRoaXMuX3VzZXJJZCk7XHJcbiAgfVxyXG5cclxuICBnZXRJZCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9pZDtcclxuICB9XHJcblxyXG4gIHJlbW92ZUNhcmQgPSAoKSA9PiB7XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudC5yZW1vdmUoKTtcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50ID0gbnVsbDtcclxuICB9O1xyXG5cclxuICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9kZWxldGVDYXJkLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PlxyXG4gICAgICB0aGlzLl9oYW5kbGVEZWxldGUodGhpcy5faWQpXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuX2xpa2VDYXJkLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PlxyXG4gICAgICB0aGlzLl9oYW5kbGVMaWtlQnV0dG9uKHRoaXMuX2lkKVxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLl9nYWxsZXJ5SW1nLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PlxyXG4gICAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sodGhpcy5fbmFtZSwgdGhpcy5fbGluaylcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBfYWRkTGlrZSgpIHtcclxuICAgIHRoaXMuX2xpa2VDYXJkLmNsYXNzTGlzdC5hZGQoXCJidXR0b25fbGlrZWRcIik7XHJcbiAgfVxyXG5cclxuICBfcmVtb3ZlTGlrZSgpIHtcclxuICAgIHRoaXMuX2xpa2VDYXJkLmNsYXNzTGlzdC5yZW1vdmUoXCJidXR0b25fbGlrZWRcIik7XHJcbiAgfVxyXG5cclxuICBzZXRMaWtlcyhuZXdMaWtlcykge1xyXG4gICAgdGhpcy5fbGlrZXMgPSBuZXdMaWtlcztcclxuICAgIGNvbnNvbGUubG9nKHRoaXMuX293bmVyLCBcIm93bmVyXCIsIHRoaXMuX3VzZXJJZCwgXCJ1c2VySWRcIik7XHJcbiAgICBjb25zdCBsaWtlc0Ftb3VudCA9IHRoaXMuX2xpa2VzLmxlbmd0aDtcclxuICAgIHRoaXMuX2NvdW50ZXJMaWtlcy50ZXh0Q29udGVudCA9IGxpa2VzQW1vdW50O1xyXG4gICAgdGhpcy5fcmVuZGVyTGlrZXMoKTtcclxuICB9XHJcbiAgX2hpZGVEZWxldGVCdXR0b24oKSB7XHJcbiAgICBpZiAodGhpcy5fb3duZXIgIT09IHRoaXMuX3VzZXJJZCkge1xyXG4gICAgICB0aGlzLl9kZWxldGVDYXJkLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgIH1cclxuICB9XHJcbiAgX3JlbmRlckxpa2VzKCkge1xyXG4gICAgaWYgKHRoaXMuaXNMaWtlZCgpKSB7XHJcbiAgICAgIHRoaXMuX2FkZExpa2UoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX3JlbW92ZUxpa2UoKTtcclxuICAgIH1cclxuICB9XHJcbiAgX2dlbmVyYXRlQ2FyZCgpIHtcclxuICAgIHJldHVybiAodGhpcy5fY2FyZEVsZW1lbnQgPSBkb2N1bWVudFxyXG4gICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl90ZW1wbGF0ZUVsZW1lbnQpXHJcbiAgICAgIC5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZ2FsbGVyeV9faXRlbVwiKVxyXG4gICAgICAuY2xvbmVOb2RlKHRydWUpKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUNhcmQoKSB7XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudCA9IHRoaXMuX2dlbmVyYXRlQ2FyZCgpO1xyXG4gICAgdGhpcy5fZ2FsbGVyeUltZyA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZ2FsbGVyeV9faW1nXCIpO1xyXG4gICAgdGhpcy5fZ2FsbGVyeVRleHQgPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmRlc2NfX3RleHRcIik7XHJcbiAgICB0aGlzLl9kZWxldGVDYXJkID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5nYWxsZXJ5X19iaW5cIik7XHJcbiAgICB0aGlzLl9saWtlQ2FyZCA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubGlrZV9fYnV0dG9uXCIpO1xyXG4gICAgdGhpcy5fY291bnRlckxpa2VzID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5saWtlX19jb3VudGVyXCIpO1xyXG4gICAgdGhpcy5fZ2FsbGVyeVRleHQudGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xyXG4gICAgdGhpcy5fZ2FsbGVyeUltZy5zcmMgPSB0aGlzLl9saW5rO1xyXG5cclxuICAgIHRoaXMuX2dhbGxlcnlJbWcuYWx0ID0gdGhpcy5fYWx0O1xyXG4gICAgdGhpcy5fcmVuZGVyTGlrZXMoKTtcclxuICAgIHRoaXMuX2hpZGVEZWxldGVCdXR0b24oKTtcclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2NhcmRFbGVtZW50O1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XHJcbiAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIGZvcm1FbGVtZW50KSB7XHJcbiAgICB0aGlzLl9zZXR0aW5ncyA9IHNldHRpbmdzO1xyXG4gICAgdGhpcy5fZm9ybUVsZW1lbnQgPSBmb3JtRWxlbWVudDtcclxuICAgIHRoaXMuX2FsbElucHV0cyA9IFtcclxuICAgICAgLi4udGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9zZXR0aW5ncy5pbnB1dFNlbGVjdG9yKSxcclxuICAgIF07XHJcblxyXG4gICAgdGhpcy5fYnV0dG9uRWwgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICB0aGlzLl9zZXR0aW5ncy5idXR0b25TZWxlY3RvclxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHJlc2V0VmFsaWRhdGlvbiA9ICgpID0+IHtcclxuICAgIHRoaXMuX2hpZGVBbGxFcnJvcnMoKTtcclxuICAgIHRoaXMuX2Rpc2FibGVCdXR0b24oKTtcclxuICB9O1xyXG5cclxuICBlbmFibGVWYWxpZGF0aW9uID0gKCkgPT4ge1xyXG4gICAgdGhpcy5fZm9ybUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiBldnQucHJldmVudERlZmF1bHQoKSk7XHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIH07XHJcblxyXG4gIF9zZXRFdmVudExpc3RlbmVycyA9ICgpID0+IHtcclxuICAgIHRoaXMuX2FsbElucHV0cy5mb3JFYWNoKChpbnB1dEVsKSA9PiB7XHJcbiAgICAgIGlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHtcclxuICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbCk7XHJcbiAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgX2hpZGVBbGxFcnJvcnMgPSAoKSA9PiB7XHJcbiAgICB0aGlzLl9hbGxJbnB1dHMuZm9yRWFjaCgoaW5wdXQpID0+IHtcclxuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXQpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuICBfZW5hYmxlQnV0dG9uKCkge1xyXG4gICAgY29uc3QgeyBidXR0b25EaXNhYmxlIH0gPSB0aGlzLl9zZXR0aW5ncztcclxuICAgIHRoaXMuX2J1dHRvbkVsLmNsYXNzTGlzdC5yZW1vdmUoYnV0dG9uRGlzYWJsZSk7XHJcbiAgICB0aGlzLl9idXR0b25FbC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gIH1cclxuICBfZGlzYWJsZUJ1dHRvbiA9ICgpID0+IHtcclxuICAgIGNvbnN0IHsgYnV0dG9uRGlzYWJsZSB9ID0gdGhpcy5fc2V0dGluZ3M7XHJcbiAgICB0aGlzLl9idXR0b25FbC5jbGFzc0xpc3QuYWRkKGJ1dHRvbkRpc2FibGUpO1xyXG4gICAgdGhpcy5fYnV0dG9uRWwuZGlzYWJsZWQgPSB0cnVlO1xyXG4gIH07XHJcblxyXG4gIF9zaG93SW5wdXRFcnJvciA9IChpbnB1dEVsLCBlcnJvck1lc3NhZ2UpID0+IHtcclxuICAgIGNvbnN0IHsgaW5wdXRFcnJvckNsYXNzLCBzcGFuRXJyb3JDbGFzcyB9ID0gdGhpcy5fc2V0dGluZ3M7XHJcbiAgICB0aGlzLl9lcnJvckRpbmFtaWNUYWcgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBgLmZpZWxkc2V0X19lcnJvci10eXBlLSR7aW5wdXRFbC5pZH1gXHJcbiAgICApO1xyXG5cclxuICAgIGlucHV0RWwuY2xhc3NMaXN0LmFkZChpbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgdGhpcy5fZXJyb3JEeW5hbWljVGFnLnRleHRDb250ZW50ID0gZXJyb3JNZXNzYWdlO1xyXG4gICAgdGhpcy5fZXJyb3JEeW5hbWljVGFnLmNsYXNzTGlzdC5hZGQoc3BhbkVycm9yQ2xhc3MpO1xyXG4gIH07XHJcblxyXG4gIF9oaWRlSW5wdXRFcnJvciA9IChpbnB1dEVsKSA9PiB7XHJcbiAgICBjb25zdCB7IGlucHV0RXJyb3JDbGFzcywgc3BhbkVycm9yQ2xhc3MgfSA9IHRoaXMuX3NldHRpbmdzO1xyXG4gICAgdGhpcy5fZXJyb3JEeW5hbWljVGFnID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgYC5maWVsZHNldF9fZXJyb3ItdHlwZS0ke2lucHV0RWwuaWR9YFxyXG4gICAgKTtcclxuXHJcbiAgICBpbnB1dEVsLmNsYXNzTGlzdC5yZW1vdmUoaW5wdXRFcnJvckNsYXNzKTtcclxuICAgIHRoaXMuX2Vycm9yRHluYW1pY1RhZy5jbGFzc0xpc3QucmVtb3ZlKHNwYW5FcnJvckNsYXNzKTtcclxuICAgIHRoaXMuX2Vycm9yRHluYW1pY1RhZy50ZXh0Q29udGVudCA9IFwiXCI7XHJcbiAgfTtcclxuXHJcbiAgX2NoZWNrRm9ybVZhbGlkaXR5ID0gKCkgPT5cclxuICAgIHRoaXMuX2FsbElucHV0cy5ldmVyeSgoaW5wdXQpID0+IGlucHV0LnZhbGlkaXR5LnZhbGlkKTtcclxuXHJcbiAgX3RvZ2dsZUJ1dHRvbiA9ICgpID0+IHtcclxuICAgIGNvbnN0IHsgYnV0dG9uRGlzYWJsZSB9ID0gdGhpcy5fc2V0dGluZ3M7XHJcbiAgICBjb25zdCBpc0lucHV0c1ZhbGlkID0gdGhpcy5fY2hlY2tGb3JtVmFsaWRpdHkoKTtcclxuXHJcbiAgICBpZiAoaXNJbnB1dHNWYWxpZCkge1xyXG4gICAgICB0aGlzLl9lbmFibGVCdXR0b24oKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2Rpc2FibGVCdXR0b24oKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBfY2hlY2tJbnB1dFZhbGlkaXR5ID0gKGlucHV0RWwpID0+IHtcclxuICAgIGlmICghaW5wdXRFbC52YWxpZGl0eS52YWxpZCkge1xyXG4gICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dEVsLCBpbnB1dEVsLnZhbGlkYXRpb25NZXNzYWdlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWwpO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLl9wb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXBTZWxlY3Rvcik7XHJcbiAgfVxyXG4gIF9oYW5kbGVPdmVybGF5ID0gKGV2dCkgPT4ge1xyXG4gICAgaWYgKGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwicG9wdXBcIikpIHtcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIF9oYW5kbGVFc2NDbG9zZSA9IChldnQpID0+IHtcclxuICAgIGlmIChldnQua2V5ID09PSBcIkVzY2FwZVwiKSB7XHJcbiAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH1cclxuICB9O1xyXG4gIG9wZW4oKSB7XHJcbiAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QuYWRkKFwicG9wdXBfb3BlblwiKTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICB9XHJcbiAgY2xvc2UoKSB7XHJcbiAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QucmVtb3ZlKFwicG9wdXBfb3BlblwiKTtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICB9XHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLl9wb3B1cC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuX2hhbmRsZU92ZXJsYXkpO1xyXG4gICAgdGhpcy5fcG9wdXBcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX2Nsb3NlXCIpXHJcbiAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsICgpID0+IHRoaXMuY2xvc2UoKSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IFBvcHVwIH0gZnJvbSBcIi4vUG9wdXBcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIGhhbmRsZUZvcm0pIHtcclxuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5faGFuZGxlRm9ybSA9IGhhbmRsZUZvcm07XHJcbiAgICB0aGlzLl9mb3JtID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcihcIi5mb3JtXCIpO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKFwiLmZpZWxkc2V0X19idXR0b25cIik7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b25UZXh0ID0gdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50O1xyXG4gICAgdGhpcy5faW5wdXRzID0gQXJyYXkuZnJvbSh0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZmllbGRzZXRfX2lucHV0XCIpKTtcclxuICB9XHJcblxyXG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcclxuICAgIGNvbnN0IHZhbHVlcyA9IHt9O1xyXG5cclxuICAgIHRoaXMuX2lucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICBjb25zdCBrZXkgPSBpbnB1dC5uYW1lO1xyXG4gICAgICBjb25zdCB2YWx1ZSA9IGlucHV0LnZhbHVlO1xyXG4gICAgICB2YWx1ZXNba2V5XSA9IHZhbHVlO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdmFsdWVzO1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldnQpID0+IHtcclxuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIGNvbnN0IHZhbHVlc0Zyb21Gb3JtID0gdGhpcy5fZ2V0SW5wdXRWYWx1ZXMoKTtcclxuXHJcbiAgICAgIHRoaXMuX2hhbmRsZUZvcm0odmFsdWVzRnJvbUZvcm0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJMb2FkaW5nKGlzTG9hZGluZywgbG9hZGluZ1RleHQgPSBcIlNhdmluZy4uLlwiKSB7XHJcbiAgICBpZiAoaXNMb2FkaW5nKSB7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IGxvYWRpbmdUZXh0O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gdGhpcy5fc3VibWl0QnV0dG9uVGV4dDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgc3VwZXIuY2xvc2UoKTtcclxuICAgIHRoaXMuX2Zvcm0ucmVzZXQoKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IEFwaSBmcm9tIFwiLi4vY29tcG9uZW50cy9BcGlcIjtcclxuY29uc3QgZ2FsbGVyeVdyYXAgPSBcIi5nYWxsZXJ5XCI7XHJcbmNvbnN0IGF2YXRhclBvcHVwID0gXCIucG9wdXBfdHlwZV9hdmF0YXJcIjtcclxuY29uc3QgYWRkQ2FyZFBvcHVwID0gXCIucG9wdXBfdHlwZV9jYXJkXCI7XHJcbmNvbnN0IHByb2ZpbGVQb3B1cCA9IFwiLnBvcHVwX3R5cGVfcHJvZmlsZVwiO1xyXG5jb25zdCBvcGVuSW1nVmlldyA9IFwiLnBvcHVwX3R5cGVfem9vbVwiO1xyXG5jb25zdCBuYW1lSW5wdXQgPSBkb2N1bWVudC5mb3Jtcy5mb3JtUHJvZmlsZS5lbGVtZW50cy5uYW1lO1xyXG5jb25zdCBhYm91dElucHV0ID0gZG9jdW1lbnQuZm9ybXMuZm9ybVByb2ZpbGUuZWxlbWVudHMuYWJvdXQ7XHJcbmNvbnN0IGF2YXRhcklucHV0ID0gZG9jdW1lbnQuZm9ybXMuZm9ybUF2YXRhci5lbGVtZW50cy5saW5rO1xyXG5jb25zdCB0ZW1wbGF0ZVNlbGVjdG9yID0gXCIjZ2FsbGVyeV9faXRlbVwiO1xyXG5jb25zdCBwcm9maWxlU3BhbkFycmF5ID0ge1xyXG4gIG5hbWU6IFwiLnRleHRfX25hbWVcIixcclxuICBhYm91dDogXCIudGV4dF9fYWJvdXRcIixcclxuICBhdmF0YXI6IFwiLnRvcF9faW1nXCIsXHJcbn07XHJcblxyXG5jb25zdCBvcGVuUHJvZmlsZVBvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50ZXh0X19lZGl0XCIpO1xyXG5jb25zdCBvcGVuSW1nQWRkUG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRvcF9fcGx1cy1ib3hcIik7XHJcbmNvbnN0IG9wZW5BdmF0YXJQb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudG9wX19jb250YWluZXItaW1hZ2VcIik7XHJcbi8vc2V0dGluZ3NcclxuY29uc3Qgc2V0dGluZ3MgPSB7XHJcbiAgaW5wdXRTZWxlY3RvcjogXCIuZmllbGRzZXRfX2lucHV0XCIsXHJcbiAgYnV0dG9uU2VsZWN0b3I6IFwiLmZpZWxkc2V0X19idXR0b25cIixcclxuICBidXR0b25EaXNhYmxlOiBcImZpZWxkc2V0X19idXR0b25fZGlzYWJsZWRcIixcclxuICBpbnB1dEVycm9yQ2xhc3M6IFwiZmllbGRzZXRfX2lucHV0X2Vycm9yXCIsXHJcbiAgc3BhbkVycm9yQ2xhc3M6IFwiZmllbGRzZXRfX2Vycm9yLW1lc3NhZ2UtYWN0aXZlXCIsXHJcbn07XHJcbmxldCB1c2VySWQ7XHJcbmxldCBzZWN0aW9uTmV3ID0gXCJcIjtcclxuXHJcbmNvbnN0IGFwaSA9IG5ldyBBcGkoe1xyXG4gIGJhc2VVcmw6IFwiaHR0cHM6Ly9hcm91bmQubm9tb3JlcGFydGllcy5jby92MS9jb2hvcnQtMy1lblwiLFxyXG5cclxuICBoZWFkZXJzOiB7XHJcbiAgICBhdXRob3JpemF0aW9uOiBcIjZlZmI3MTVmLTNmMjctNDdhYS1iMTFiLTAwZDQ3NmJiODBhMlwiLFxyXG5cclxuICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gIH0sXHJcbn0pO1xyXG5cclxuZXhwb3J0IHtcclxuICBnYWxsZXJ5V3JhcCxcclxuICBhdmF0YXJQb3B1cCxcclxuICBhZGRDYXJkUG9wdXAsXHJcbiAgcHJvZmlsZVBvcHVwLFxyXG4gIG9wZW5JbWdWaWV3LFxyXG4gIG5hbWVJbnB1dCxcclxuICBhYm91dElucHV0LFxyXG4gIGF2YXRhcklucHV0LFxyXG4gIHRlbXBsYXRlU2VsZWN0b3IsXHJcbiAgcHJvZmlsZVNwYW5BcnJheSxcclxuICBvcGVuQXZhdGFyUG9wdXAsXHJcbiAgb3BlblByb2ZpbGVQb3B1cCxcclxuICBvcGVuSW1nQWRkUG9wdXAsXHJcbiAgc2V0dGluZ3MsXHJcbiAgdXNlcklkLFxyXG4gIHNlY3Rpb25OZXcsXHJcbiAgYXBpLFxyXG59O1xyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBBcGkge1xyXG4gIGNvbnN0cnVjdG9yKHNldHRpbmdzKSB7XHJcbiAgICB0aGlzLl9iYXNlVXJsID0gc2V0dGluZ3MuYmFzZVVybDtcclxuICAgIHRoaXMuX2hlYWRlcnMgPSBzZXR0aW5ncy5oZWFkZXJzO1xyXG4gIH1cclxuXHJcbiAgX2N1c3RvbUZldGNoKHVybCwgaGVhZGVycykge1xyXG4gICAgcmV0dXJuIGZldGNoKHVybCwgaGVhZGVycykudGhlbigocmVzKSA9PlxyXG4gICAgICByZXMub2sgPyByZXMuanNvbigpIDogUHJvbWlzZS5yZWplY3QocmVzLnN0YXR1c1RleHQpXHJcbiAgICApO1xyXG4gIH1cclxuICBnZXRDYXJkcygpIHtcclxuICAgIHJldHVybiB0aGlzLl9jdXN0b21GZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkc2AsIHtcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pO1xyXG4gIH1cclxuICBnZXRVc2VySW5mbygpIHtcclxuICAgIHJldHVybiB0aGlzLl9jdXN0b21GZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAsIHtcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2V0VXNlckluZm8oeyBuYW1lLCBhYm91dCB9KSB7XHJcbiAgICByZXR1cm4gdGhpcy5fY3VzdG9tRmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICBhYm91dDogYWJvdXQsXHJcbiAgICAgIH0pLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhZGRDYXJkKHsgbmFtZSwgbGluayB9KSB7XHJcbiAgICByZXR1cm4gdGhpcy5fY3VzdG9tRmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgIGxpbms6IGxpbmssXHJcbiAgICAgIH0pLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBlZGl0QXZhdGFyKGF2YXRhcikge1xyXG4gICAgcmV0dXJuIHRoaXMuX2N1c3RvbUZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lL2F2YXRhcmAsIHtcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBhdmF0YXI6IGF2YXRhcixcclxuICAgICAgfSksXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZUNhcmQoY2FyZElkKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fY3VzdG9tRmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvJHtjYXJkSWR9YCwge1xyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGRpc2xpa2VDYXJkKGlkKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fY3VzdG9tRmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvbGlrZXMvJHtpZH1gLCB7XHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbGlrZUNhcmQoaWQpIHtcclxuICAgIHJldHVybiB0aGlzLl9jdXN0b21GZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy9saWtlcy8ke2lkfWAsIHtcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgbWV0aG9kOiBcIlBVVFwiLFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBcIi4vaW5kZXguY3NzXCI7XHJcbmltcG9ydCB7IENhcmQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9DYXJkXCI7XHJcbmltcG9ydCB7IEZvcm1WYWxpZGF0b3IgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yXCI7XHJcbmltcG9ydCB7IFBvcHVwV2l0aEltYWdlIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2VcIjtcclxuaW1wb3J0IHsgUG9wdXBXaXRoRm9ybSB9IGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm1cIjtcclxuaW1wb3J0IFBvcHVwV2l0aFN1Ym1pdCBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhTdWJtaXRcIjtcclxuaW1wb3J0IHsgU2VjdGlvbiB9IGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb25cIjtcclxuaW1wb3J0IHsgVXNlckluZm8gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9Vc2VySW5mb1wiO1xyXG5cclxuaW1wb3J0IHtcclxuICBnYWxsZXJ5V3JhcCxcclxuICBhdmF0YXJQb3B1cCxcclxuICBhZGRDYXJkUG9wdXAsXHJcbiAgcHJvZmlsZVBvcHVwLFxyXG4gIG9wZW5JbWdWaWV3LFxyXG4gIHRlbXBsYXRlU2VsZWN0b3IsXHJcbiAgcHJvZmlsZVNwYW5BcnJheSxcclxuICBvcGVuQXZhdGFyUG9wdXAsXHJcbiAgb3BlblByb2ZpbGVQb3B1cCxcclxuICBvcGVuSW1nQWRkUG9wdXAsXHJcbiAgc2V0dGluZ3MsXHJcbiAgbmFtZUlucHV0LFxyXG4gIGFib3V0SW5wdXQsXHJcbiAgYXZhdGFySW5wdXQsXHJcbiAgYXBpLFxyXG59IGZyb20gXCIuLi91dGlsaXRpZXMvY29uc3RhbnRzXCI7XHJcblxyXG5jb25zdCBjb25maXJtUG9wdXAgPSBuZXcgUG9wdXBXaXRoU3VibWl0KFwiLnBvcHVwX3R5cGVfZGVsZXRlXCIpO1xyXG5cclxuY29uZmlybVBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG5sZXQgdXNlcklkO1xyXG5cclxuY29uc3Qgc2VjdGlvbiA9IG5ldyBTZWN0aW9uKChkYXRhKSA9PiB7XHJcbiAgcmVuZGVyQ2FyZChkYXRhKTtcclxufSwgZ2FsbGVyeVdyYXApO1xyXG5cclxuY29uc3QgcmVuZGVyQ2FyZCA9IChkYXRhKSA9PiB7XHJcbiAgc2VjdGlvbi5hZGRJdGVtKGNyZWF0ZUNhcmQoZGF0YSkpO1xyXG59O1xyXG5cclxuLy9mdW5jdGlvbnMvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8ocHJvZmlsZVNwYW5BcnJheSk7XHJcblByb21pc2UuYWxsKFthcGkuZ2V0VXNlckluZm8oKSwgYXBpLmdldENhcmRzKCldKVxyXG4gIC50aGVuKChbdXNlckRhdGEsIGNhcmRzRGF0YV0pID0+IHtcclxuICAgIHVzZXJJZCA9IHVzZXJEYXRhLl9pZDtcclxuICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKHtcclxuICAgICAgbmFtZUlucHV0OiB1c2VyRGF0YS5uYW1lLFxyXG4gICAgICBhYm91dElucHV0OiB1c2VyRGF0YS5hYm91dCxcclxuICAgIH0pO1xyXG4gICAgdXNlckluZm8uc2V0QXZhdGFyKHVzZXJEYXRhLmF2YXRhcik7XHJcbiAgICBzZWN0aW9uLnJlbmRlckluaXRpYWxJdGVtcyhjYXJkc0RhdGEpO1xyXG4gIH0pXHJcbiAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKGBFcnJvciBzb210aGluZyB3ZW50IHdyb25nLiAke2Vycn1gKSk7XHJcblxyXG5jb25zdCBzdWJtaXRQcm9maWxlRm9ybUlucHV0cyA9IChkYXRhKSA9PiB7XHJcbiAgcHJvZmlsZUZvcm0ucmVuZGVyTG9hZGluZyh0cnVlLCBcIiBBZGRpbmcuLi5cIik7XHJcbiAgYXBpXHJcbiAgICAuc2V0VXNlckluZm8oeyBuYW1lOiBkYXRhLm5hbWUsIGFib3V0OiBkYXRhLmFib3V0LCBhdmF0YXI6IGRhdGEuYXZhdGFyIH0pXHJcbiAgICAudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICB1c2VySW5mby5zZXRVc2VySW5mbyh7XHJcbiAgICAgICAgbmFtZUlucHV0OiBkYXRhLm5hbWUsXHJcbiAgICAgICAgYWJvdXRJbnB1dDogZGF0YS5hYm91dCxcclxuICAgICAgICBhdmF0YXJJbnB1dDogZGF0YS5hdmF0YXIsXHJcbiAgICAgIH0pO1xyXG4gICAgICBwcm9maWxlRm9ybS5jbG9zZSgpO1xyXG4gICAgICB1c2VySW5mby5zZXRBdmF0YXJJbmZvKGRhdGEuYXZhdGFyKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coYEVycm9yIHNvbXRoaW5nIHdlbnQgd3JvbmcuICR7ZXJyfWApKVxyXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICBwcm9maWxlRm9ybS5yZW5kZXJMb2FkaW5nKGZhbHNlKTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuY29uc3QgY3JlYXRlQ2FyZCA9IChkYXRhKSA9PiB7XHJcbiAgY29uc3QgY2FyZCA9IG5ldyBDYXJkKFxyXG4gICAgZGF0YSxcclxuICAgIHVzZXJJZCxcclxuICAgIHRlbXBsYXRlU2VsZWN0b3IsXHJcbiAgICAobmFtZSwgbGluaykgPT4ge1xyXG4gICAgICBwb3B1cFdpdGhJbWFnZS5vcGVuKG5hbWUsIGxpbmspO1xyXG4gICAgfSxcclxuICAgIChpZCkgPT4ge1xyXG4gICAgICBpZiAoY2FyZC5pc0xpa2VkKCkpIHtcclxuICAgICAgICBhcGlcclxuICAgICAgICAgIC5kaXNsaWtlQ2FyZChpZClcclxuICAgICAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgICAgY2FyZC5zZXRMaWtlcyhyZXMubGlrZXMpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhgRXJyb3Igc29tdGhpbmcgd2VudCB3cm9uZy4gJHtlcnJ9YCkpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFwaVxyXG4gICAgICAgICAgLmxpa2VDYXJkKGlkKVxyXG4gICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgICBjYXJkLnNldExpa2VzKHJlcy5saWtlcyk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKGBFcnJvciBzb210aGluZyB3ZW50IHdyb25nLiAke2Vycn1gKSk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICAoY2FyZElkKSA9PiB7XHJcbiAgICAgIGNvbmZpcm1Qb3B1cC5vcGVuKCk7XHJcbiAgICAgIGNvbmZpcm1Qb3B1cC5zZXRBY3Rpb24oKCkgPT4ge1xyXG4gICAgICAgIGNvbmZpcm1Qb3B1cC5yZW5kZXJMb2FkaW5nKHRydWUsIFwiRGVsZXRpbmcuLi5cIik7XHJcbiAgICAgICAgYXBpXHJcbiAgICAgICAgICAuZGVsZXRlQ2FyZChjYXJkSWQpXHJcbiAgICAgICAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgICAgIGNhcmQucmVtb3ZlQ2FyZCgpO1xyXG4gICAgICAgICAgICBjb25maXJtUG9wdXAuY2xvc2UoKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coYEVycm9yIHNvbXRoaW5nIHdlbnQgd3JvbmcuICR7ZXJyfWApKVxyXG4gICAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25maXJtUG9wdXAucmVuZGVyTG9hZGluZyhmYWxzZSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgKTtcclxuICByZXR1cm4gY2FyZC5jcmVhdGVDYXJkKCk7XHJcbn07XHJcblxyXG5jb25zdCBhZGRDYXJkRm9ybSA9IG5ldyBQb3B1cFdpdGhGb3JtKGFkZENhcmRQb3B1cCwgKGRhdGEpID0+IHtcclxuICBhZGRDYXJkRm9ybS5yZW5kZXJMb2FkaW5nKHRydWUsIFwiU2F2aW5nLi4uXCIpO1xyXG4gIGFwaVxyXG4gICAgLmFkZENhcmQoeyBuYW1lOiBkYXRhLnRpdGxlLCBsaW5rOiBkYXRhLmxpbmsgfSlcclxuICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgcmVuZGVyQ2FyZChyZXMsIGdhbGxlcnlXcmFwKTtcclxuICAgICAgYWRkQ2FyZEZvcm0uY2xvc2UoKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coYEVycm9yIHNvbXRoaW5nIHdlbnQgd3JvbmcuICR7ZXJyfWApKVxyXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICBhZGRDYXJkRm9ybS5yZW5kZXJMb2FkaW5nKGZhbHNlKTtcclxuICAgIH0pO1xyXG59KTtcclxuXHJcbmNvbnN0IGZvcm1WYWxpZGF0b3JzID0ge307XHJcblxyXG5jb25zdCBlbmFibGVWYWxpZGF0aW9uID0gKCkgPT4ge1xyXG4gIGNvbnN0IGZvcm1MaXN0ID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmZvcm1cIikpO1xyXG4gIGZvcm1MaXN0LmZvckVhY2goKGZvcm1FbCkgPT4ge1xyXG4gICAgY29uc3QgdmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3Ioc2V0dGluZ3MsIGZvcm1FbCk7XHJcbiAgICBjb25zdCBmb3JtTmFtZSA9IGZvcm1FbC5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpO1xyXG4gICAgZm9ybVZhbGlkYXRvcnNbZm9ybU5hbWVdID0gdmFsaWRhdG9yO1xyXG4gICAgdmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuICB9KTtcclxufTtcclxuXHJcbmNvbnN0IHJlc2V0QXZhdGFyRm9ybVZhbGlkYXRpb24gPSAoKSA9PiB7XHJcbiAgZm9ybVZhbGlkYXRvcnNbZm9ybUF2YXRhci5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpXS5yZXNldFZhbGlkYXRpb24oKTtcclxufTtcclxuY29uc3QgcmVzZXRJbWdBZGRGb3JtID0gKCkgPT4ge1xyXG4gIGZvcm1WYWxpZGF0b3JzW2Zvcm1JbWcuZ2V0QXR0cmlidXRlKFwibmFtZVwiKV0ucmVzZXRWYWxpZGF0aW9uKCk7XHJcbn07XHJcbmNvbnN0IGhhbmRsZUF2YXRhclN1Ym1pdCA9IChkYXRhKSA9PiB7XHJcbiAgcHJvZmlsZUF2YXRhci5yZW5kZXJMb2FkaW5nKHRydWUsIFwiQ2hhbmdpbmcuLi5cIik7XHJcbiAgYXBpXHJcbiAgICAuZWRpdEF2YXRhcihkYXRhLnVybClcclxuICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgdXNlckluZm8uc2V0QXZhdGFyKHJlcy5hdmF0YXIpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhgRXJyb3Igc29tdGhpbmcgd2VudCB3cm9uZy4gJHtlcnJ9YCkpXHJcbiAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgIHByb2ZpbGVBdmF0YXIucmVuZGVyTG9hZGluZyhmYWxzZSk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcbmNvbnN0IGhhbmRsZVByb2ZpbGVGb3JtSW5wdXRzID0gKCkgPT4ge1xyXG4gIGNvbnN0IHsgbmFtZSwgYWJvdXQgfSA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XHJcbiAgbmFtZUlucHV0LnZhbHVlID0gbmFtZTtcclxuICBhYm91dElucHV0LnZhbHVlID0gYWJvdXQ7XHJcbn07XHJcblxyXG5jb25zdCByZXNldEFuZE9wZW5Qcm9maWxlRm9ybSA9ICgpID0+IHtcclxuICBmb3JtVmFsaWRhdG9yc1tmb3JtUHJvZmlsZS5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpXS5yZXNldFZhbGlkYXRpb24oKTtcclxuICBjb25zdCBwcm9maWxlRGF0YSA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XHJcbiAgaGFuZGxlUHJvZmlsZUZvcm1JbnB1dHMocHJvZmlsZURhdGEpO1xyXG4gIHByb2ZpbGVGb3JtLm9wZW4oKTtcclxufTtcclxuXHJcbmVuYWJsZVZhbGlkYXRpb24oKTtcclxuXHJcbi8vY2xhc3Nlcy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuY29uc3QgcG9wdXBXaXRoSW1hZ2UgPSBuZXcgUG9wdXBXaXRoSW1hZ2Uob3BlbkltZ1ZpZXcpO1xyXG5wb3B1cFdpdGhJbWFnZS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuY29uc3QgcHJvZmlsZUZvcm0gPSBuZXcgUG9wdXBXaXRoRm9ybShwcm9maWxlUG9wdXAsIHN1Ym1pdFByb2ZpbGVGb3JtSW5wdXRzKTtcclxucHJvZmlsZUZvcm0uc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbmNvbnN0IHByb2ZpbGVBdmF0YXIgPSBuZXcgUG9wdXBXaXRoRm9ybShhdmF0YXJQb3B1cCwgKGRhdGEpID0+IHtcclxuICBoYW5kbGVBdmF0YXJTdWJtaXQoZGF0YSk7XHJcbiAgcHJvZmlsZUF2YXRhci5jbG9zZSgpO1xyXG59KTtcclxuXHJcbi8vbGlzdGVuZXJzLy8vLy8vLy8vL1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbm9wZW5JbWdBZGRQb3B1cC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIHJlc2V0SW1nQWRkRm9ybSgpO1xyXG5cclxuICBhZGRDYXJkRm9ybS5vcGVuKCk7XHJcbn0pO1xyXG5hZGRDYXJkRm9ybS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxub3BlblByb2ZpbGVQb3B1cC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIHJlc2V0QW5kT3BlblByb2ZpbGVGb3JtKCk7XHJcbn0pO1xyXG5cclxucHJvZmlsZUF2YXRhci5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxub3BlbkF2YXRhclBvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgcmVzZXRBdmF0YXJGb3JtVmFsaWRhdGlvbigpO1xyXG4gIHByb2ZpbGVBdmF0YXIub3BlbigpO1xyXG59KTtcclxuIiwiaW1wb3J0IHsgUG9wdXAgfSBmcm9tIFwiLi9Qb3B1cFwiO1xyXG5cclxuY2xhc3MgUG9wdXBXaXRoU3VibWl0IGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fZm9ybSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybVwiKTtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvcihcclxuICAgICAgXCIuZmllbGRzZXRfX2J1dHRvbi10eXBlLXNhdmVcIlxyXG4gICAgKTtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvblRleHQgPSB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQ7XHJcbiAgfVxyXG4gIHNldEFjdGlvbihhY3Rpb24pIHtcclxuICAgIHRoaXMuX3N1Ym1pdEhhbmRsZXIgPSBhY3Rpb247XHJcbiAgfVxyXG5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy5fc3VibWl0SGFuZGxlcigpO1xyXG4gICAgfSk7XHJcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyTG9hZGluZyhpc0xvYWRpbmcsIGxvYWRpbmdUZXh0ID0gXCJEZWxldGluZy4uLlwiKSB7XHJcbiAgICBpZiAoaXNMb2FkaW5nKSB7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IGxvYWRpbmdUZXh0O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gdGhpcy5fc3VibWl0QnV0dG9uVGV4dDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgUG9wdXBXaXRoU3VibWl0O1xyXG4iLCJleHBvcnQgY2xhc3MgU2VjdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3RvcihyZW5kZXJlciwgY29udGFpbmVyU2VsZWN0b3IpIHtcclxuICAgICAgICAvLyB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJTZWxlY3Rvcik7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVySW5pdGlhbEl0ZW1zKGl0ZW1zKSB7XHJcbiAgICAgICAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlcihpdGVtKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgYWRkSXRlbShpdGVtKSB7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLnByZXBlbmQoaXRlbSk7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIFVzZXJJbmZvIHtcclxuICBjb25zdHJ1Y3RvcihkYXRhKSB7XHJcbiAgICB0aGlzLl91c2VyTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZGF0YS5uYW1lKTtcclxuICAgIHRoaXMuX3VzZXJBYm91dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZGF0YS5hYm91dCk7XHJcbiAgICB0aGlzLl91c2VyQXZhdGFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihkYXRhLmF2YXRhcik7XHJcbiAgfVxyXG5cclxuICBnZXRVc2VySW5mbygpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5hbWU6IHRoaXMuX3VzZXJOYW1lLnRleHRDb250ZW50LFxyXG4gICAgICBhYm91dDogdGhpcy5fdXNlckFib3V0LnRleHRDb250ZW50LFxyXG4gICAgICBhdmF0YXI6IHRoaXMuX3VzZXJBdmF0YXIuc3JjLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHNldFVzZXJJbmZvKHsgbmFtZUlucHV0LCBhYm91dElucHV0IH0pIHtcclxuICAgIHRoaXMuX3VzZXJOYW1lLnRleHRDb250ZW50ID0gbmFtZUlucHV0O1xyXG4gICAgdGhpcy5fdXNlckFib3V0LnRleHRDb250ZW50ID0gYWJvdXRJbnB1dDtcclxuICB9XHJcblxyXG4gIHNldEF2YXRhcihhdmF0YXJJbnB1dCkge1xyXG4gICAgdGhpcy5fdXNlckF2YXRhci5zcmMgPSBhdmF0YXJJbnB1dDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUG9wdXAgfSBmcm9tIFwiLi9Qb3B1cFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fcG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fY2FwdGlvbiA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX2NhcHRpb25cIik7XHJcbiAgICB0aGlzLl9pbWFnZSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX2ltZ1wiKTtcclxuICB9XHJcbiAgb3BlbihuYW1lLCBsaW5rKSB7XHJcbiAgICB0aGlzLl9jYXB0aW9uLnRleHRDb250ZW50ID0gbmFtZTtcclxuICAgIHRoaXMuX2ltYWdlLnNyYyA9IGxpbms7XHJcbiAgICB0aGlzLl9pbWFnZS5hbHQgPSBgUGhvdG8gb2YgJHtuYW1lfWA7XHJcbiAgICBzdXBlci5vcGVuKCk7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJDYXJkIiwiY29uc3RydWN0b3IiLCJkYXRhIiwidXNlcklkIiwic2VsZWN0b3IiLCJoYW5kbGVDYXJkQ2xpY2siLCJoYW5kbGVMaWtlQnV0dG9uIiwiaGFuZGxlRGVsZXRlIiwidGhpcyIsIl9jYXJkRWxlbWVudCIsInJlbW92ZSIsIl9uYW1lIiwibmFtZSIsIl91c2VySWQiLCJfbGluayIsImxpbmsiLCJfbGlrZXMiLCJsaWtlcyIsIl9vd25lciIsIm93bmVyIiwiX2lkIiwiX2hhbmRsZUNhcmRDbGljayIsIl9oYW5kbGVMaWtlQnV0dG9uIiwiX2hhbmRsZURlbGV0ZSIsIl9hbHQiLCJfdGVtcGxhdGVFbGVtZW50IiwiaXNMaWtlZCIsInNvbWUiLCJsaWtlIiwiZ2V0SWQiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJfZGVsZXRlQ2FyZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJfbGlrZUNhcmQiLCJfZ2FsbGVyeUltZyIsIl9hZGRMaWtlIiwiY2xhc3NMaXN0IiwiYWRkIiwiX3JlbW92ZUxpa2UiLCJzZXRMaWtlcyIsIm5ld0xpa2VzIiwiY29uc29sZSIsImxvZyIsImxpa2VzQW1vdW50IiwibGVuZ3RoIiwiX2NvdW50ZXJMaWtlcyIsInRleHRDb250ZW50IiwiX3JlbmRlckxpa2VzIiwiX2hpZGVEZWxldGVCdXR0b24iLCJzdHlsZSIsImRpc3BsYXkiLCJfZ2VuZXJhdGVDYXJkIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGVudCIsImNsb25lTm9kZSIsImNyZWF0ZUNhcmQiLCJfZ2FsbGVyeVRleHQiLCJzcmMiLCJhbHQiLCJGb3JtVmFsaWRhdG9yIiwic2V0dGluZ3MiLCJmb3JtRWxlbWVudCIsIl9oaWRlQWxsRXJyb3JzIiwiX2Rpc2FibGVCdXR0b24iLCJfZm9ybUVsZW1lbnQiLCJldnQiLCJwcmV2ZW50RGVmYXVsdCIsIl9hbGxJbnB1dHMiLCJmb3JFYWNoIiwiaW5wdXRFbCIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJfdG9nZ2xlQnV0dG9uIiwiaW5wdXQiLCJfaGlkZUlucHV0RXJyb3IiLCJidXR0b25EaXNhYmxlIiwiX3NldHRpbmdzIiwiX2J1dHRvbkVsIiwiZGlzYWJsZWQiLCJlcnJvck1lc3NhZ2UiLCJpbnB1dEVycm9yQ2xhc3MiLCJzcGFuRXJyb3JDbGFzcyIsIl9lcnJvckRpbmFtaWNUYWciLCJpZCIsIl9lcnJvckR5bmFtaWNUYWciLCJldmVyeSIsInZhbGlkaXR5IiwidmFsaWQiLCJfY2hlY2tGb3JtVmFsaWRpdHkiLCJfZW5hYmxlQnV0dG9uIiwiX3Nob3dJbnB1dEVycm9yIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5wdXRTZWxlY3RvciIsImJ1dHRvblNlbGVjdG9yIiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwidGFyZ2V0IiwiY29udGFpbnMiLCJjbG9zZSIsImtleSIsIl9wb3B1cCIsIm9wZW4iLCJfaGFuZGxlRXNjQ2xvc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJfaGFuZGxlT3ZlcmxheSIsIlBvcHVwV2l0aEZvcm0iLCJoYW5kbGVGb3JtIiwic3VwZXIiLCJfaGFuZGxlRm9ybSIsIl9mb3JtIiwiX3N1Ym1pdEJ1dHRvbiIsIl9zdWJtaXRCdXR0b25UZXh0IiwiX2lucHV0cyIsIkFycmF5IiwiZnJvbSIsIl9nZXRJbnB1dFZhbHVlcyIsInZhbHVlcyIsInZhbHVlIiwidmFsdWVzRnJvbUZvcm0iLCJyZW5kZXJMb2FkaW5nIiwiaXNMb2FkaW5nIiwibG9hZGluZ1RleHQiLCJyZXNldCIsImdhbGxlcnlXcmFwIiwibmFtZUlucHV0IiwiZm9ybXMiLCJmb3JtUHJvZmlsZSIsImVsZW1lbnRzIiwiYWJvdXRJbnB1dCIsImFib3V0Iiwib3BlblByb2ZpbGVQb3B1cCIsImZvcm1BdmF0YXIiLCJvcGVuSW1nQWRkUG9wdXAiLCJvcGVuQXZhdGFyUG9wdXAiLCJhcGkiLCJfYmFzZVVybCIsImJhc2VVcmwiLCJfaGVhZGVycyIsImhlYWRlcnMiLCJfY3VzdG9tRmV0Y2giLCJ1cmwiLCJmZXRjaCIsInRoZW4iLCJyZXMiLCJvayIsImpzb24iLCJQcm9taXNlIiwicmVqZWN0Iiwic3RhdHVzVGV4dCIsImdldENhcmRzIiwiZ2V0VXNlckluZm8iLCJzZXRVc2VySW5mbyIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiYWRkQ2FyZCIsImVkaXRBdmF0YXIiLCJhdmF0YXIiLCJkZWxldGVDYXJkIiwiY2FyZElkIiwiZGlzbGlrZUNhcmQiLCJsaWtlQ2FyZCIsImF1dGhvcml6YXRpb24iLCJjb25maXJtUG9wdXAiLCJzZXRBY3Rpb24iLCJhY3Rpb24iLCJfc3VibWl0SGFuZGxlciIsInNlY3Rpb24iLCJyZW5kZXJlciIsImNvbnRhaW5lclNlbGVjdG9yIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsInJlbmRlckluaXRpYWxJdGVtcyIsIml0ZW1zIiwiaXRlbSIsImFkZEl0ZW0iLCJwcmVwZW5kIiwicmVuZGVyQ2FyZCIsInVzZXJJbmZvIiwiX3VzZXJOYW1lIiwiX3VzZXJBYm91dCIsIl91c2VyQXZhdGFyIiwic2V0QXZhdGFyIiwiYXZhdGFySW5wdXQiLCJhbGwiLCJ1c2VyRGF0YSIsImNhcmRzRGF0YSIsImNhdGNoIiwiZXJyIiwiY2FyZCIsInBvcHVwV2l0aEltYWdlIiwicmVtb3ZlQ2FyZCIsImZpbmFsbHkiLCJhZGRDYXJkRm9ybSIsInRpdGxlIiwiZm9ybVZhbGlkYXRvcnMiLCJmb3JtRWwiLCJ2YWxpZGF0b3IiLCJmb3JtTmFtZSIsImdldEF0dHJpYnV0ZSIsImVuYWJsZVZhbGlkYXRpb24iLCJfY2FwdGlvbiIsIl9pbWFnZSIsInByb2ZpbGVGb3JtIiwic2V0QXZhdGFySW5mbyIsInByb2ZpbGVBdmF0YXIiLCJoYW5kbGVBdmF0YXJTdWJtaXQiLCJmb3JtSW1nIiwicmVzZXRWYWxpZGF0aW9uIiwiaGFuZGxlUHJvZmlsZUZvcm1JbnB1dHMiXSwic291cmNlUm9vdCI6IiJ9